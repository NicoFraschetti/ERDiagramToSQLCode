modeltype ER uses 'ER';
modeltype RDB uses 'SimpleRDBMS';

transformation ER_To_SimpleRDBMS(in er : ER, out RDB);

main(){
	er.rootObjects()[ER::ERDiagram]->map erDiagram2Schema();
}

mapping ER::ERDiagram::erDiagram2Schema() : RDB::Schema {
	name := self.name;
	tables := self.relatableelements[ER::Entity]->select(e | e.mustBeTabulated())-> map entities2Tables()
	->union(self.relatableelements[ER::Relation]->select(r | r.isNToN()) -> map nToNRelations2Tables())
	->union(self.relatableelements[ER::Entity]->collect(e | e.getMultivaluedAttrs()-> map multivaluedAttrs2Tables(e)));
}

mapping ER::Entity::entities2Tables() : RDB::Table { 
	name := self.name; 
	columns := (self.getAttrs()->reject(a | a.isMultiValued)-> map attrs2Columns())
	->union(self.getParentAttrs()->reject(a | a.isMultiValued)-> map inheritedAttrs2Columns(self))
	->union(self.getRelationsFromEntityAsSource()
	->collect(r | r.destination.getRelatableElementPK().key_attributes -> map relationOppositeAttrs2Columns(self,r.destination)))
	->union(self.getRelationsFromEntityAsDest()
	->collect(r | r.source.getRelatableElementPK().key_attributes -> map relationOppositeAttrs2Columns(self,r.source)))
	->union(self.getRelationsFromEntityAsSource()->union(self.getRelationsFromEntityAsDest())
	->collect(r | r.attributes)-> map attrs2Columns());
	keys := (self.keys->union(self.getPK()))-> map keys2TableKeys(self);
	var fkByInheritance : Bag(RDB::ForeignKey);
	if (self.someAncestorMustBeTabulated()) then {
		fkByInheritance := self.getPK()-> map addPKForeignKeys(self);
	}
	endif;
	var reWithOnePK : Bag(ER::RelatableElement);
	var reWithMore : Bag(ER::RelatableElement);
	reWithOnePK := self.getRelationsFromEntityAsSource()->collect(r | r.destination.getTopTabulatedElement())
	->select(re | not re.isRelationAndNToN())
	->union(self.getRelationsFromEntityAsDest()->collect(r | r.source.getTopTabulatedElement())
	->select(re | not re.isRelationAndNToN()));
	reWithMore := self.getRelationsFromEntityAsSource()->collect(r | r.destination.getTopTabulatedElement())
	->select(re | re.isRelationAndNToN())
	->union(self.getRelationsFromEntityAsDest()->collect(r | r.source.getTopTabulatedElement())
	->select(re | re.isRelationAndNToN()));
	var fkByRelations : Bag(RDB::ForeignKey);
	fkByRelations := reWithOnePK->collect(re | re.getRelatableElementPK(). map relationOppositePK2ForeignKeys(self,re))
	->union(reWithMore->collect(re | re.getRelatableElementPK()-> map nToNrelationOppositePK2ForeignKeys(self,re)));
	foreignKeys := fkByInheritance->union(fkByRelations);
//	foreignKeys := fkByInheritance->union(self.getRelationsFromEntityAsSource()
//	->collect(r | r.destination.getRelatableElementPK(). map relationOppositePK2ForeignKeys(self,r.destination)))
//	->union(self.getRelationsFromEntityAsDest()
//	->collect(r | r.source.getRelatableElementPK(). map relationOppositePK2ForeignKeys(self,r.source)));		
}

mapping ER::Relation::nToNRelations2Tables() : RDB::Table {
	name := self.name;
	columns := self.attributes-> map attrs2Columns()->asBag()
	->union(self.source.getRelatableElementPK().key_attributes -> map relationOppositeAttrs2Columns(self,self.source)->asBag())
	->union(self.destination.getRelatableElementPK().key_attributes -> map relationOppositeAttrs2Columns(self,self.destination)->asBag());
	keys := self. map getRelationTableKey();
//	reWithOnePK := self.getRelationsFromEntityAsSource()->collect(r | r.destination.getTopTabulatedElement())
//	->select(re | not re.isRelationAndNToN())
	var fkByRelations : Bag(RDB::ForeignKey);
	var topSourceElement : ER::RelatableElement;
	var topDestElement : ER::RelatableElement;
	topSourceElement := self.source.getTopTabulatedElement();
	topDestElement := self.destination.getTopTabulatedElement();
	if (not topSourceElement.isRelationAndNToN() and not topDestElement.isRelationAndNToN()) then {
		foreignKeys := topSourceElement.getRelatableElementPK(). map relationOppositePK2ForeignKeys(self,topSourceElement)
		->union(topDestElement.getRelatableElementPK(). map relationOppositePK2ForeignKeys(self,topDestElement));
	}
	else {
		if (topSourceElement.isRelationAndNToN() and topDestElement.isRelationAndNToN()) then {
			foreignKeys := topSourceElement.getRelatableElementPK()-> map nToNrelationOppositePK2ForeignKeys(self,topSourceElement)->asBag()
			->union(topDestElement.getRelatableElementPK()-> map nToNrelationOppositePK2ForeignKeys(self,topDestElement)->asBag());
		}
		else {
			if (topSourceElement.isRelationAndNToN()) {
				foreignKeys := topSourceElement.getRelatableElementPK()-> map nToNrelationOppositePK2ForeignKeys(self,topSourceElement)->asBag()
				->union(topDestElement.getRelatableElementPK(). map relationOppositePK2ForeignKeys(self,topDestElement));
			}
			else {
				foreignKeys := topSourceElement.getRelatableElementPK(). map relationOppositePK2ForeignKeys(self,topSourceElement)->asBag()
				->union(topDestElement.getRelatableElementPK()-> map nToNrelationOppositePK2ForeignKeys(self,topDestElement)->asBag());
			}
			endif;
		}
		endif;
	}
	endif; 
}

mapping ER::Attribute::multivaluedAttrs2Tables(in ownerEnt : ER::Entity) : RDB::Table {
	name := self.name+ownerEnt.name;
	columns := self. map attrs2Columns()->union(ownerEnt.getPK().key_attributes-> map pkAttrs2Columns(self,ownerEnt));
	keys := ownerEnt.getPK().key_attributes->asSet()-> map mulAttrTable2Key(self,ownerEnt);
	foreignKeys := ownerEnt.getPK(). map getMulAttrTableFK(self,ownerEnt);	
}

mapping Set(ER::Attribute)::mulAttrTable2Key(in mulAttr : ER::Attribute, in callerEnt : ER::Entity) : RDB::Key {
	name := 'PK'+mulAttr.name;
	columns := mulAttr. map attrs2Columns()->union(callerEnt.getPK().key_attributes-> map pkAttrs2Columns(mulAttr,callerEnt));
	isPrimaryKey := true;
}

mapping ER::PrimaryKey::getMulAttrTableFK(in mulAttr : ER::Attribute, in callerEnt : ER::Entity) : RDB::ForeignKey {
	name := 'Fk'+callerEnt.name;
	columns := self.key_attributes-> map pkAttrs2Columns(mulAttr,callerEnt);
	refersTo := self.oclAsType(ER::Key). map keys2TableKeys(callerEnt);
}

mapping ER::Attribute::pkAttrs2Columns(in mulAttr : ER::Attribute, in callerEnt : ER::Entity) : RDB::Column {
	name := self.name+callerEnt.name+mulAttr.name;	
	type := self.getSqlType();
}

mapping Set(ER::PrimaryKey)::nToNrelationOppositePK2ForeignKeys(in callerEntity : ER::RelatableElement ,in relOpposite : ER::RelatableElement) : RDB::ForeignKey {
	name := 'FK'+relOpposite.getTopTabulatedElement().name+callerEntity.name;
	refersTo := relOpposite.oclAsType(ER::Relation). map getRelationTableKey();  
	columns := self->collect(pk | pk.key_attributes)-> map relationOppositeAttrs2Columns(callerEntity,relOpposite);	
}

mapping ER::PrimaryKey::relationOppositePK2ForeignKeys(in callerEntity : ER::RelatableElement ,in relOpposite : ER::RelatableElement) : RDB::ForeignKey {
	name := 'FK'+relOpposite.getTopTabulatedElement().name+callerEntity.name;
	var topElement : ER::RelatableElement;
	topElement := relOpposite.getTopTabulatedElement();
	if (topElement.isEntity()) then {
		var entity : ER::Entity;
		entity := topElement.oclAsType(ER::Entity);
		//owner := entity. map entities2Tables();
		refersTo := entity.getPK()->any(true).oclAsType(ER::Key). map keys2TableKeys(entity);
	}
	else {
		var r : ER::Relation;
		r := relOpposite.oclAsType(ER::Relation);
		refersTo := r. map getRelationTableKey();
		//owner := r. map nToNRelations2Tables();
	}
	endif;
	columns := self.key_attributes-> map relationOppositeAttrs2Columns(callerEntity,relOpposite); 
}

mapping ER::Attribute::relationOppositeAttrs2Columns(in callerEntity : ER::RelatableElement ,in relOpposite : ER::RelatableElement ) : RDB::Column {
	name := self.name+'_'+relOpposite.getTopTabulatedElement().name.toLowerCase()+'_'+callerEntity.name.toLowerCase();
	type := self.getSqlType();
}

mapping ER::Attribute::inheritedAttrs2Columns(in callerEntity: ER::Entity) : RDB::Column {
	name := self.name+'_'+(callerEntity.name.toLowerCase());
	type := self.getSqlType();
}

mapping ER::Attribute::attrs2Columns() : RDB::Column {
	name := self.name;	
	type := self.getSqlType();
}

mapping ER::Key::keys2TableKeys(in callerEntity : ER::Entity) : RDB::Key {
	if (self.oclIsTypeOf(ER::PrimaryKey)) then {
		name := 'PK'+callerEntity.name;
		isPrimaryKey := true;
		if (callerEntity.hasParent()) then {
			columns := self.key_attributes-> map inheritedAttrs2Columns(callerEntity);
		}
		else {
			columns := self.key_attributes-> map attrs2Columns();
		}
		endif;
	}
	else{
		name := self.name;
		isPrimaryKey := false;
		columns := self.key_attributes-> map attrs2Columns();
	}
	endif;
}

mapping ER::Relation::getRelationTableKey() : RDB::Key {
	name :='PK'+self.name;
	isPrimaryKey := true;
	columns := self.source.getRelatableElementPK().key_attributes -> map relationOppositeAttrs2Columns(self,self.source)->asBag()
	->union(self.destination.getRelatableElementPK().key_attributes -> map relationOppositeAttrs2Columns(self,self.destination)->asBag());
}

mapping ER::PrimaryKey::addPKForeignKeys(in callerEntity : ER::Entity) : RDB::ForeignKey {
	name := 'FK'+self.key_owner.name;
	columns := callerEntity.getPK().key_attributes -> map inheritedAttrs2Columns(callerEntity);
	refersTo := self.oclAsType(ER::Key).map keys2TableKeys(self.key_owner);
}

query ER::Attribute::getSqlType() : String {
	if (self.type = ER::Type::String) then {
		return 'VARCHAR(100)';	
	}
	else {
		if (self.type = ER::Type::Integer) then {
			return 'INTEGER';	
		}
		else{
			if (self.type = ER::Type::Real) then {
				return 'REAL';	
			}
			else{
				return 'DATETIME';
			}
			endif;
		}
		endif;
	}
	endif;
}

query ER::Entity::hasChilds() : Boolean {
	return self.childs->size() > 0;
}

//pre-condicion: debe tener padre
query ER::Entity::getParent() : ER::Entity {
	return self.parents->any(true);
}

query ER::Entity::mustBeTabulated() : Boolean {
	return (not self.hasChilds())  or (self.hasChilds() and (self.allowOverlappingChilds or (self.sourceOpposite->size() > 0 or self.destOpposite->size() > 0)));
}

query ER::Entity::hasParent() : Boolean {
	return self.parents->size() > 0;
}

query ER::Entity::hasPK() : Boolean {
	return self.primarykey -> size() > 0;
}

query ER::Entity::getAttrs() : Set(ER::Attribute) {
	return self.attributes;
}

query ER::Entity::getPKAttrs() : Set(ER::Attribute) {
	if (not self.hasPK()) then {
		return Set{};	
	}
	else {
		return self.primarykey->any(true).key_attributes;
	}
	endif;
}

//Pre-condicion: Debe ser necesario crear la tabla correspondiente a la entidad
query ER::Entity::getParentAttrs() : Set(ER::Attribute) {
	if (not self.hasParent()) then {
		return Set{};
	}
	else {
		if (self.getParent().mustBeTabulated()) then {
			return self.getParent().getPKAttrs()->union(self.getParent().getParentAttrs());
		}
		else {
			return self.getParent().getAttrs()->union(self.getParent().getParentAttrs());
		}
		endif;
	}
	endif;
}

query ER::Entity::getPK() : Set(ER::PrimaryKey) {
	if (not self.hasParent()) then {
		return self.primarykey->asSet();
	}
	else {
		return self.getParent().getPK();
	}
	endif;
}

query ER::Entity::someAncestorMustBeTabulated() : Boolean {
	return self->closure(p | p.parents)->exists(e | e.mustBeTabulated());
}

// Para evitar el pasaje de columnas para ambos lados, solo paso las columnas de pk de dest a source
query ER::Relation::is1To1() : Boolean {
	return self.srcUpperBound = CardinalBounds::uno and self.destUpperBound = CardinalBounds::uno;
}

query ER::Relation::is1ToN() : Boolean {
	return self.srcUpperBound = CardinalBounds::uno and self.destUpperBound = CardinalBounds::N;
}

query ER::Relation::isNTo1() : Boolean {
	return self.srcUpperBound = CardinalBounds::N and self.destUpperBound = CardinalBounds::uno;
}

query ER::Relation::isNToN() : Boolean {
	return self.srcUpperBound = CardinalBounds::N and self.destUpperBound = CardinalBounds::N;
}

query ER::RelatableElement::getRelatableElementPK() : Set(ER::PrimaryKey) {
	if (self.oclIsTypeOf(ER::Entity)) then {
		return self.oclAsType(ER::Entity).getPK();
	}
	else {
		var relation : ER::Relation;
		relation := self.oclAsType(ER::Relation);
		if (relation.is1ToN()) {
			return relation.destination.getRelatableElementPK();
		}
		else {
			if (relation.isNTo1()) then {
				return relation.source.getRelatableElementPK();
			}
			else {
				if (relation.isNToN()) then {
					return relation.destination.getRelatableElementPK()->union(relation.source.getRelatableElementPK());	
				}
				else {
					return relation.source.getRelatableElementPK();	
				}
				endif;				
			}
			endif;
		}
		endif;
	}
	endif;
	return null;	
}

query ER::Entity::getRelationsFromEntityAsSource() : Set(ER::Relation) {
	return self.sourceOpposite->select(r | r.isNTo1() or r.is1To1());	
}

query ER::Entity::getRelationsFromEntityAsDest() : Set(ER::Relation) {
	return self.destOpposite->select(r | r.is1ToN());	
}

query ER::RelatableElement::isEntity() : Boolean {
	return self.oclIsTypeOf(ER::Entity);
}

query ER::RelatableElement::getTopTabulatedElement() : ER::RelatableElement {
	if (self.isEntity()) then {
		return self;
	}
	else {
		var r : ER::Relation;
		r := self.oclAsType(ER::Relation);
		if (r.isNToN()) then {
			return self;
		}
		else {
			if (r.isNTo1() or r.is1To1()) then {
				return r.source.getTopTabulatedElement();
			}
			else {
				return r.destination.getTopTabulatedElement();
			}
			endif;
		}
		endif;
	}
	endif;
	return null;	
}

query ER::RelatableElement::isRelationAndNToN() : Boolean {
	if (self.isEntity()) then {
		return false;
	}
	endif;
	return self.oclAsType(ER::Relation).isNToN();	
}

query ER::Entity::getMultivaluedAttrs() : Set(ER::Attribute) {
	return self.attributes->select(isMultiValued);
}